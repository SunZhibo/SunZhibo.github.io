<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Keccak-256算法详解</title>
    <url>/2022/08/31/Keccak-256%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="keccak-256">keccak-256</h2>
<p>keccak-256是以太坊采用的哈希加密函数，其与标准的SHA3-256仅仅在<code>padding</code>方式上有所不同，但是产生的结果是完全不一样的，我们主要关注以太坊使用的keccak-256。</p>
<p>keccak函数族采用了海绵结构，可以接受任意长度的输入，也可以提供任意长度的输出。keccak函数有两个用以描述其加密难度的参数：</p>
<ul>
<li>r：bitrate，表示加密时每一轮输入的数据比特数，决定了数据输入的长度</li>
<li>c：capacity，表示加密时数据的额外比特数，与参数r共同决定了哈希操作的数据长度<code>b=r+c</code></li>
</ul>
<p>keccak函数工作可以分为输入和输出两个主要的阶段，每个阶段都依赖于海绵结构，海绵结构中具有<code>b</code>比特的数据。（要求<span
class="math inline">\(b=25*2^{l}\)</span>，其中<span
class="math inline">\(l \in [0, 6]\)</span>）</p>
<p>在哈希函数工作前，首先按照比特率<code>r</code>对数据进行<code>padding</code>对齐，实现的方法为在数据后添加最少数量的<code>10*1</code>，使数据的长度为<code>r</code>的倍数，记得到的新数据<span
class="math inline">\(P =
M||pad[r]\)</span>。（标准的SHA3-256唯一不同的地方在于其修改了<code>padding</code>的方式，这导致了哈希结果巨大的差异）</p>
<p>在输入阶段，海绵结构在初始状态下是全0的<code>b</code>比特数据。依次向“海绵”中输入<code>r</code>比特的待加密数据，与海绵结构的前<code>r</code>比特进行异或，再通过加密函数<code>f()</code>得到新的海绵结构。不断重复上述过程直至对齐后的待加密数据全部输入海绵结构。</p>
<p>在输出过程中，依次从“海绵”中取出前<code>r</code>比特数据作为输出，如果长度小于要求的输出长度，则再通过加密函数<code>f()</code>得到新的海绵结构，重复取出前<code>r</code>比特数据直至长度大于等于要求。取得到的数据的前<code>n</code>位作为输出，即是<code>keccak-n</code>算法的哈希结果。</p>
<div style="width:70%;margin:auto">
<img src="/2022/08/31/Keccak-256%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/keccak.png" class="" title="keccak work process">
</div>
<p>接下来的重点是加密函数<code>f()</code>，这是<code>keccak</code>函数族更新海绵结构的核心，<code>f()</code>函数以<code>b</code>比特数据作为输入，以<code>b</code>比特数据作为输出。将<code>b</code>比特的数据排列为一个三维矩阵，将其中的一个元素记为<code>a[x][y][z]</code>，<span
class="math inline">\(x, y \in [0, 5), z \in
2^{l}\)</span>，特别地当<code>b=1600</code>时，可以将<code>a[x][y]</code>视为一个5x5的64位整型数组。<code>f()</code>函数会执行<code>n_&#123;r&#125;=12+2l</code>轮加密，每一轮加密由五个部分组成，接下来按照顺序依次介绍这五个部分。</p>
<p>需要补充的是以下的运算都定义在<code>GF(2)</code>上，加法即为异或操作，乘法即为与操作。</p>
<p><span class="math inline">\(\theta: a[x][y][z] = a[x][y][z] +
\sum_{y&#39;=0}^{4} a[x-1][y&#39;][z] +
\sum_{y&#39;=0}^{4}a[x+1][y&#39;][z-1]\)</span>。直观地理解<span
class="math inline">\(\theta\)</span>操作，将矩阵a的每一行与上一行，下一行进行异或操作，其中下一行需要进行循环右移一位。</p>
<p><span class="math inline">\(\rho: a[x][y][z] =
a[x][y][z-(t+1)(t+2)/2]\)</span>，其中<span class="math inline">\(t \in
[0, 24)\)</span>并且在<code>GF(5)</code>域中满足<span
class="math inline">\(\begin{pmatrix} 0 &amp; 1 \\ 2 &amp; 3
\end{pmatrix}^{t} \begin{pmatrix} 1 \\ 0 \end{pmatrix} = \begin{pmatrix}
x \\ y \end{pmatrix}\)</span>，特殊地当<span
class="math inline">\(x=y=0\)</span>时，令<span
class="math inline">\(t=-1\)</span>。<span
class="math inline">\(\rho\)</span>操作只对每个整形内部的比特顺序进行调整。</p>
<p><span class="math inline">\(\pi: a[x][y] = a[x&#39;][y&#39;],
\begin{pmatrix} x \\ y \end{pmatrix} = \begin{pmatrix} 0 &amp; 1 \\ 2
&amp; 3\end{pmatrix} \begin{pmatrix} x&#39; \\
y&#39;\end{pmatrix}\)</span>。 <span
class="math inline">\(\pi\)</span>操作只改变整形间的顺序。</p>
<p><span class="math inline">\(\chi: a[x] = a[x] + (a[x+1] +
1)a[x+2]\)</span>。<span
class="math inline">\(\chi\)</span>操作对行间进行操作，对数据进行杂凑加密。</p>
<p><span class="math inline">\(\iota: a = a + RC[i_{r}]\)</span>。<span
class="math inline">\(\iota\)</span>操作异或上轮常数进行混淆，其中轮常数只有64位，因此值改变了<code>a[0][0]</code>的值。</p>
<p>在实际实现中，可以通过预先计算好的常数对<span
class="math inline">\(\rho, \pi\)</span>操作优化加速。</p>
<h2 id="keccak-256算法的实现">keccak-256算法的实现</h2>
<h2 id="参考链接">参考链接</h2>
<ol type="1">
<li><a href="https://www.youtube.com/watch?v=ucw5ZW291V0">Learn
Keccak-256 on Youtube</a></li>
<li><a
href="https://keccak.team/files/Keccak-reference-3.0.pdf">Keccak-reference-3.0</a></li>
<li><a
href="https://keccak.team/files/Keccak-implementation-3.2.pdf">Keccak-implementation-3.2</a></li>
<li><a
href="https://keccak.team/keccak_specs_summary.html">Keccak-Official
website</a></li>
</ol>
]]></content>
      <tags>
        <tag>Ethereum</tag>
        <tag>Keccak-256</tag>
      </tags>
  </entry>
  <entry>
    <title>日报</title>
    <url>/2022/09/02/%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h2 id="年9月">2022年9月</h2>
<h3 id="月第一周">9月第一周</h3>
<h4 id="section">9.1</h4>
<p>贺sr学长和苑zq学长参与到了现在的HardwareEVM项目，老板给开了组会，确定了我们小组接下来短期的任务方向，先做一个硬件的模型出来，不用特意考虑太多的东西，先大概感受一下硬件解决方案的实际性能。</p>
<p>接下来要做的两件主要的事情：</p>
<ol type="1">
<li>与学长同步我那糟糕的毕业设计，分析一下硬件设计并改进一下</li>
<li>完成PCIE通信模块，实现一个硬件加速卡</li>
</ol>
<h4 id="section-1">9.2</h4>
<p>今天读了《精通以太坊》的钱包章节，详细地看了一下密钥的派生原理，接下来有时间会整理到博客上，然后终于跑完了以太坊历史数据的同步，硬生生地扩了两次wsl的虚拟硬盘大小，给我1T的Sanmsung
EVO 980差点没塞满了。</p>
<h4 id="section-2">9.3 - 9.4</h4>
<p>摸鱼</p>
<h3 id="月第二周">9月第二周</h3>
<h4 id="section-3">9.5</h4>
<p>向贺sr学长请教了一下HardwareEVM的设计，给了我两点指导：</p>
<ol type="1">
<li>数据的位宽并不一定直接影响时序，关键是该数据参与了何种的操作</li>
<li>硬件设计不能想当然的去分析优化，还是要根据实际跑出来的结果有针对的进行改进</li>
</ol>
<p>在我之前设计的基础上又提出了以下几点：</p>
<ol type="1">
<li>乘除运算采用IP核加速，并且可以简化设计</li>
<li>对Memory进行切分，按照最小操作单位MSTORE8来做</li>
<li>如果指令过长可以考虑对取指进行流水化</li>
</ol>
<p>接下来的主要工作就是把我原来写的代码成功地在FPGA上run起来，现在先通读一遍我之前的设计，把学长提出的改进也加进去。</p>
<h4 id="section-4">9.6</h4>
<p>整理了钱包相关的内容到了博客上，把密钥的派生与攻击过程模拟了一遍，剩下的时间在HardwareEVM项目上，跟贺sr学长一起开始看这一坨屎山。</p>
<h4 id="section-5">9.7</h4>
<p>今天有点事情，摸了。</p>
<h4 id="section-6">9.8</h4>
<p>周四的组会，没什么新的任务和内容，继续尝试硬件加速的效果。重写了前端的代码Buffer。</p>
<h4 id="section-7">9.9 - 9.11</h4>
<p>中秋放假，摸了。</p>
<h3 id="月第三周">9月第三周</h3>
<h4 id="section-8">9.12</h4>
<p>读了《精通以太坊》第六章交易相关的内容，重点看了数字签名的原理，公钥的恢复，整理到了博客上。</p>
]]></content>
      <tags>
        <tag>record</tag>
      </tags>
  </entry>
  <entry>
    <title>《Mastering Ethereum》读书笔记</title>
    <url>/2022/08/31/%E3%80%8AMastering-Ethereum%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>根据领域的需求买了一本《精通以太坊》，看的过程中顺便整理一下之前不知道的知识。</p>
<h2 id="以太坊背后的密码学">以太坊背后的密码学</h2>
<p>私钥是用户于本地随机生成的256位随机数字，私钥对应着以太坊账户的控制权和所有权，因此需要严格保密。私钥的生成更依赖于密码学安全的伪随机数生成器（如CSPRNG），在以太坊中私钥可以是<span
class="math inline">\([1, n-1]\)</span>中的任何数字，其中<span
class="math inline">\(n\)</span>代表了以太坊使用的椭圆曲线的阶，为<span
class="math inline">\(1.158 * 10^{77}\)</span>。</p>
<p>以太坊使用椭圆曲线保证非对称密码的安全性，采用<code>secp256k1</code>的标准，对应椭圆曲线为<span
class="math inline">\(y^{2} \equiv (x^{3} + 7) \ mod \
p\)</span>，其中<span class="math inline">\(p=2^{256} - 2^{32} - 2^{9} -
2^{8} - 2^{7} - 2^{6} - 2^{4} -
1\)</span>是一个大素数。椭圆曲线上的两点<span class="math inline">\(p1,
p2\)</span>，定义<span
class="math inline">\(p1+p2=p3\)</span>，其中<span
class="math inline">\(p3\)</span>为点<span class="math inline">\(p1,
p2\)</span>连线与椭圆曲线的唯一交点，特别地若<span
class="math inline">\(p1=p2\)</span>，那么<span
class="math inline">\(p3\)</span>则为过点<span
class="math inline">\(p1\)</span>的切线与椭圆曲线的唯一交点。根据加法在椭圆曲线上的定义，定义正整数乘法<span
class="math inline">\(k *
p=p+p+....+p\)</span>，得到的仍然是椭圆曲线上的唯一点。</p>
<p>公钥则是由私钥计算产生的椭圆曲线上的一个点，记私钥为<span
class="math inline">\(k\)</span>，公钥为<span
class="math inline">\(K\)</span>，那么则有<span class="math inline">\(K
= k * G\)</span>，其中<span
class="math inline">\(G\)</span>是一个椭圆曲线上的常量点。由于椭圆曲线的定义，椭圆曲线上的乘法是难以进行逆运算的，因此保证了私钥的安全性。根据SECG发布的一种序列化编码方式，用四种可能的前缀来表示椭圆曲线上的点位，如下表所示，以太坊使用未压缩点编码公钥，即<code>0x04 + x + y</code>的方式编码。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">前缀</th>
<th style="text-align: center;">含义</th>
<th style="text-align: center;">长度（字节）</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0x00</td>
<td style="text-align: center;">无穷远点(0,0)</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="even">
<td style="text-align: center;">0x04</td>
<td style="text-align: center;">未压缩点，保存<span
class="math inline">\(x, y\)</span>坐标</td>
<td style="text-align: center;">65</td>
</tr>
<tr class="odd">
<td style="text-align: center;">0x01</td>
<td style="text-align: center;">偶数<span
class="math inline">\(y\)</span>压缩点</td>
<td style="text-align: center;">33</td>
</tr>
<tr class="even">
<td style="text-align: center;">0x03</td>
<td style="text-align: center;">奇数<span
class="math inline">\(y\)</span>压缩点</td>
<td style="text-align: center;">33</td>
</tr>
</tbody>
</table>
<p>以太坊的地址则使用哈希算法对公钥进行加密（特别注意此处的公钥应带有<code>04</code>前缀），以太坊中使用的哈希加密算法为<code>keccak-256</code>算法，具体的细节在另一篇博文中讨论。通过<span
class="math inline">\(keccak(K)\)</span>我们可以得到256位结果，选出大端序中的末20字节(160位)作为账户的地址</p>
<p>为了避免转账时可能发生的地址输入错误，社区提出了<code>EIP-55</code>提案，对十六进制编码的地址进行大写检验。对于十六进制小写编码的地址<span
class="math inline">\(addr\)</span>进行哈希运算，得到大端序下的高20字节逐位检验，如果十六进制编码的哈希结果大于等于8，那么则把对应的十六进制编码的地址修改为大写（如果为字母的话）。采用大小写混合的地址后，一旦发生了地址输入错误情况，则可以通过哈希值反向对地址的合法性进行核验，由于哈希函数对于输入的变化极为敏感，即使发生了一位的错误也会使哈希结果发生巨大的变化，<code>EIP-55</code>可以有效地防止可能发生的地址输入错误。</p>
<h2 id="钱包">钱包</h2>
<p>如果用户只采用同一个地址进行转账交易的话，很容易通过地址进行交易的追踪，为了实现在去中心化网络上的匿名性，用户可以通过钱包技术管理多个派生出的账户，从而避免通过地址进行的追踪。目前的钱包大多采用了确定性钱包，即通过一个种子密钥派生出多个可用的子钥，并利用多个可用的子地址进行交易。</p>
<p>简要介绍一下助记词标准（BIP-39）。在用户创建钱包时，钱包会生成一个密码学安全意义上的随机数，记为<span
class="math inline">\(S\)</span>（长度一般为128位或者256位），取出<span
class="math inline">\(SHA-256(S)\)</span>的前<span
class="math inline">\(S/32\)</span>比特作为校验值附加在<span
class="math inline">\(S\)</span>的末尾，按照11比特一组分为<span
class="math inline">\(3S/32\)</span>组，在预先选取出的2048个简单英文单词中进行映射，形成助记词组。若用户忘记了钱包的密码，可以通过助记词可以恢复出钱包生成的随机数。分层确定性钱包（HD）由一个512比特的种子密钥开始生成，使用助记词组作为第一个参数，可选的盐（默认为"mnemonic"，可以在后附加用户指定的密码）作为第二个参数，使用密钥扩展算法PBKDF2进行2048轮HMAC-SHA512哈希运算得到。<strong>需要特别注意的是</strong>此处的密码与设立钱包时要求用户填写的密码不同，若设立时的密码丢失，可以通过助记词进行恢复，这也说明了这个密码仅作钱包的登录使用，并不参与到后续种子密钥的生成过程。</p>
<p>有了钱包的种子密钥后就可以根据曾几时确定性钱包标准（BIP-32）进行密钥的派生了，其中种子的左256位为根私钥，右256位为根链码，扩展派生出的密钥形成树形结构，根据扩展时使用的索引进行编码，不同的层级间用<code>/</code>隔开，如下图所示。</p>
<div style="width:70%;margin:auto">
<img src="/2022/08/31/%E3%80%8AMastering-Ethereum%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/BIP-32.png" class="" title="BIP-32 Standard">
</div>
<p>比较直观的派生过程如下图所示，将父公钥，父链码和索引作为哈希函数的输入，得到的512位哈希输出分为左右两部分，分别记为<code>l, r</code>，<code>l</code>与父私钥<code>p</code>相加得到子私钥<code>c=l+p</code>，<code>r</code>作为子链码用于下一级密钥的派生。为了方便钱包间的导入导出，将密钥与对应的链码结合起来称为扩展密钥，使用Base58Check进行编码，其中扩展私钥以<code>xpriv</code>开头，扩展公钥以<code>xpub</code>开头。</p>
<div style="width:70%;margin:auto">
<img src="/2022/08/31/%E3%80%8AMastering-Ethereum%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/derive-Private.png" class="" title="Parent Private Key">
</div>
<p>为了在不可信赖环境下进行部署，利用椭圆曲线运算上的结合律，可以不经过父私钥，只通过父扩展公钥生成子公钥。因为生成方法为<code>c=l+p</code>，根据公钥生成方式有<code>C=G*c, P=G*p</code>，因此有<code>C=G*(l+p)=G(l)+P</code>，将生成点与哈希结果的左半部分相乘，再加上父公钥即可得到派生出的子公钥，这样就避免了私钥的部署。</p>
<div style="width:70%;margin:auto">
<img src="/2022/08/31/%E3%80%8AMastering-Ethereum%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/derive-Public.png" class="" title="Parent Public Key">
</div>
<p>考虑如果某一个子私钥发生了泄露，在父扩展公钥暴露的情况下，可以对索引进行暴力破解，从而根据<code>c=l+p</code>的逆运算得到父私钥，使得由该父节点派生的所有密钥发生泄漏。为此引入了增强派生算法，由父私钥，父链码和索引生成子一级的私钥和链码，由于私钥不会被部署也就隔断了子一级向上推断的可能，当然缺点是私钥无法像公钥一样部署在服务器上，因此通常在最根一级使用增强派生算法，或在需要隔绝父子间推导关系的场景使用，以增强钱包的安全性。</p>
<p>为了区别两种派生方法，规定索引最高位为0代表普通派生方法，为1代表增强派生算法，特别地在表示时，<code>m/x/y</code>为密钥<code>m</code>派生的第<code>x</code>个子密钥的第<code>y</code>个子密钥，<code>m/x'/y</code>表示密钥<code>m</code>派生的第<code>x+0x80000000</code>个增强密钥的第<code>y</code>个子密钥。</p>
<p>根据BIP-44标准，定义树型层级的含义为<code>m / purpose' / coin_type' / account' / change / address_index</code>。其中<code>purpose'</code>总是设为<code>44'</code>，<code>coin-type'</code>用以区分不同的币种，以太坊是<code>60'</code>，<code>account'</code>用以区分不同的逻辑账户，<code>change</code>用以区分区块链的找零地址，<code>address_index</code>则是同一个逻辑账户下的不同地址。</p>
<p>参考链接：</p>
<ol type="1">
<li><a
href="https://medium.com/@robbiehanson15/the-math-behind-bip-32-child-key-derivation-7d85f61a6681">The
math behind BIP-32 child key derivation</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/33070394">比特币区块链（六） |
钱包的技术细节之从种子创建HD钱包</a></li>
</ol>
<h2 id="交易">交易</h2>
<p>交易是唯一能够触发以太坊区块链状态发生改变的行为（矿工挖矿除外），交易包含以下内容：</p>
<ul>
<li><code>nonce</code>：序列编号，表示该次交易是发起者账户的第几次交易，用于抵御重放攻击</li>
<li><code>gas price</code>：交易发起方愿意支付的gas价格，通常来说越高的价格对应着越快被矿工打包进区块</li>
<li><code>gas limit</code>：交易发起方愿意支付的gas上限</li>
<li><code>recipient</code>：目标以太坊地址</li>
<li><code>value</code>：交易发送给的以太币数量</li>
<li><code>data</code>：交易中附加的可变长数据</li>
<li><code>v, r, s</code>：交易附加的数字签名部分，用于验证交易安全性</li>
</ul>
<p>交易在以太坊中采用RLP（递归长度前缀）标准编码，打包为大端的，8比特倍数长度的二进制数据。</p>
<p><code>nonce</code>满足了用户按序执行交易的需求，假设用户发出多笔交易，希望可以按照顺序依次执行，但按序发出的交易数据在区块链网络中被确认的顺序只取决于它们沿着P2P网络到达确认节点的顺序，因此通过<code>nonce</code>可以保证用户的交易按序执行。如果节点收到了不符合历史<code>nonce</code>的交易，则会放入待确认交易列表，直至空缺的<code>nonce</code>都有对应的交易被确认后再做执行。同时<code>nonce</code>也作为计数器抵御了重放攻击，避免同一笔交易被恶意多次广播。但是<code>nonce</code>的这一设计也为并行化构造交易带来了难题，目前只能采用串行的方法进行多笔交易的生成。</p>
<p>交易的目标地址可以是外部账户或者合约账户，可以通过<code>data</code>段对合约账户的函数进行调用，调用时按32字节对齐，以目标函数原型定义（例如<code>withdraw(uint256)</code>）的Keccak-256哈希值的前4个字节开头，表示调用的函数，以参数作为结尾。特殊地，向<code>0x0</code>地址发送交易会将<code>data</code>段中的数据创建为一个合约，向<code>0x00...00dEaD</code>发送以太币是销毁以太币的含义，当然发送到一个任意地址也可能是在销毁以太币。</p>
<p>为了确保交易的安全性，以太坊采用了椭圆曲线数字签名算法（ECDSA）给交易附加上了数字签名，数字签名提供了身份验证，不可否认和数据完整性的支持。基于数据签名算法的性能考虑，数字签名一般只作用于待发送消息的哈希结果，即<code>Sig=F_&#123;sig&#125;(Keccak(message), k)</code>，其中<code>k</code>是用于签名的私钥，<code>message</code>则是经过打包的数据。</p>
<p>为了保证用户使用私钥对多笔交易进行签名不会导致安全性的降低，在每次签名时，除了用户本身的私钥<code>k</code>，还会采用一个随机生成的私钥<code>q</code>共同加密，得到<span
class="math inline">\(s \equiv q^{-1}(Keccak(m) + r*k) \ mod
\  p\)</span>，其中<code>p</code>是椭圆曲线上的素数阶，<code>r</code>是私钥<code>q</code>对应的公钥<code>Q</code>的横坐标，生成的签名<code>Sig=(r, s)</code>。</p>
<p>在验证数字签名时可以通过<code>r</code>对信息进行核验，如果签名有效则有<span
class="math inline">\(q \equiv s(Keccak(m) +
rk)\)</span>，私钥不可能公开，于是同乘生成点<code>G</code>得到<span
class="math inline">\(Q = Keccak(m)*sG +
rK\)</span>，即可通过<code>Q</code>对<code>r</code>进行验证数字签名的有效性，保证是从公钥<code>K</code>对应账户中发出的交易。</p>
<p>但是注意到交易中并没有附加<code>from</code>项，我们需要从签名中先恢复出交易发起方的公钥并确定其账户，这也是数字签名设计的比较巧妙的地方：<strong>引入了随机生成的密钥对，并与账户持有的密钥对建立了对应的联系</strong>。加密时的<span
class="math inline">\(q^{-1}\)</span>等价于两侧都乘上一个私钥，这样在不泄露私钥的前提下，同乘上生成点<code>G</code>就可以转换为公钥间的联系，即<span
class="math inline">\(sQ = rK +
Keccak(m)*G\)</span>，即可算出交易发起的账户公钥为<span
class="math inline">\(K=r^{-1}(sQ - Keccak(m) * G)\)</span>。</p>
<p>不过基于椭圆曲线关于x轴对称的性质，从横坐标<code>r</code>恢复公钥<code>Q</code>时会对应两个点，可以通过<code>s</code>反过来选择公钥<code>K</code>。为了提高效率，在数字签名中使用<code>(v, r, s)</code>，约定<code>v</code>使用<code>0, 1</code>表示究竟采用曲线上的哪个点，在较老的链上使用的是27或28（27是比特币采用的随机数），经过<code>SpuriousDragon</code>分叉后采用35或是36。</p>
<p>EIP-155提案又为交易增加了<code>chainID, r(=0), s(=0)</code>的结构成员，其中<code>chainID</code>是为了抵御不同以太坊网络间的重放攻击。</p>
<p>目前以太坊没有原生的多签名交易支持，需要智能合约进行实现。交易的隐秘性通过P2P的传播来保护，任何一个消息的传递都可能来自发起者或是网络中的传播节点，攻击者需要掌握大多数节点才能确认交易发起者的网络地址。</p>
]]></content>
      <tags>
        <tag>Mastering Ethereum</tag>
      </tags>
  </entry>
</search>
